#!/usr/bin/python
#
# Objects quick reference
#
# CylinderX(x1,r1,x2,r2)
# CylinderY(y1,r1,y2,r2)
# CylinderZ(z1,r1,z2,r2)
#
# Box(x1, y1, z1, x2, y2, z2)
#
# Sphere(x, y, z, r)
#
# Translate(self, parts, x, y, z)
# class Rotate(self, parts, th, x, y, z):
#
# HalTranslate(self, parts, comp, var, x, y, z)
# HalRotate(self, parts, comp, var, th, x, y, z):
#
# Color(self, color, parts):
#

#
# Machine parameters and axis identification
#
# joint0 == X
# joint1 == Y
# joint2 == Z
# joint3 == A
# joint4 == B
# joint5 == C
# joint6 == U
# joint7 == V
# joint8 == W
#
# XYA first arm 
# UVB second arm 
#
# X-U left right movement
# Y-V forward backward movement
# A-B spinning wheels
#

from vismach import *
import hal
import math
import sys

c = hal.component("testgui")
c.newpin("joint0", hal.HAL_FLOAT, hal.HAL_IN) # X *
c.newpin("joint1", hal.HAL_FLOAT, hal.HAL_IN) # Y *
c.newpin("joint2", hal.HAL_FLOAT, hal.HAL_IN) # Z
c.newpin("joint3", hal.HAL_FLOAT, hal.HAL_IN) # A *
c.newpin("joint4", hal.HAL_FLOAT, hal.HAL_IN) # B *
c.newpin("joint5", hal.HAL_FLOAT, hal.HAL_IN) # C
c.newpin("joint6", hal.HAL_FLOAT, hal.HAL_IN) # U *
c.newpin("joint7", hal.HAL_FLOAT, hal.HAL_IN) # V *
c.newpin("joint8", hal.HAL_FLOAT, hal.HAL_IN) # W
c.ready()

# draw the reference system
referencesystem = Collection([ 
    CylinderX(0,5,500,5), CylinderX(500,15,515,0),
    CylinderY(0,5,500,5), CylinderY(500,15,515,0),
    CylinderZ(0,5,500,5), CylinderZ(500,15,515,0)])

tooltip = Capture()

#
# construction parameters
#

# end effector (disk with crown of pegs) parameters
disk_thickness =    20
disk_radius =       150
peg_radius =        20
peg_lenght =        30
peg_number =        1

# end effectors are composed of disks with peg(s)
peggedwheel = Collection( [CylinderX(0,disk_radius, -disk_thickness,disk_radius), 
                    # ee peg(s)
                    Translate( [CylinderX(0,peg_radius,-peg_lenght,peg_radius)],
                        0,disk_radius,0)] )

# first end effector
wheel_A = peggedwheel
tool_A = Collection([tooltip, wheel_A] )
# disk rotation is connected to joint3 == A
tool_A = HalRotate( [tool_A],c,"joint3",1,1,0,0)
# ee translation (left-right) is connected to joint0 == X
tool_A = HalTranslate([tool_A],c,"joint0",0,1,0)
# ee translation (back-forward) is connected to joint1 == Y
tool_A = HalTranslate([tool_A],c,"joint1",1,0,0)

# second end effector
wheel_B = peggedwheel
tool_B = Collection([wheel_B])
# disk rotation is connected to joint4 == B
tool_B = HalRotate( [tool_B],c,"joint4",1,1,0,0)
# ee translation is connected to joint6 == U
tool_B = HalTranslate([tool_B],c,"joint6",0,1,0)
# ee translation (back-forward) is connected to joint7 == V
tool_B = HalTranslate([tool_B],c,"joint7",1,0,0)
# tools
tools = Collection( [tool_A, tool_B] )
tools = Translate( [tools],0,0,450 )

# Y arm
arm_Y =  Box(0, 0, 0, 1000, 100, 100)
arm_Y = HalTranslate([arm_Y],c,"joint0",0,1,0)
# V arm
arm_V =  Box(0, 0, 0, 1000, 100, 100)
arm_V = HalTranslate([arm_V],c,"joint6",0,1,0)
# joint arms
arms = Collection([ arm_Y, arm_V ])
arms = Translate( [arms],-500,0,100 )

# supporting base X and U
base_X = Box(0, 0, 0,100, 2000, 100)
base_U = Box(0, 0, 0,200, 2000, 100)
supp_base = Collection([ base_X, base_U ])

# the complete dyde system
dyde = Collection( [tools, supp_base, arms])

# there is no workpiece
work = Capture()

model = Collection([referencesystem, dyde, work])

main(model, tooltip, work, 1500)

